<?xml version="1.0" encoding="UTF-8"?>
<!--
	Application context definition for PetClinic on Hibernate.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:p="http://www.springframework.org/schema/p" 
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- ========================= RESOURCE DEFINITIONS ========================= -->

    <!-- import the dataSource definition -->
    <import resource="applicationContext-dataSource.xml"/>

	<!-- Configurer that replaces ${...} placeholders with values from a properties file -->
	<!-- (in this case, Hibernate-related settings for the sessionFactory definition below) -->
<!-- 	<context:property-placeholder location="classpath:jdbc.properties"/> -->
	
	<!-- Hibernate SessionFactory -->
<!-- 	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean" -->
<!-- 			p:dataSource-ref="dataSource" p:mappingResources="hibernate.hbm.xml" p:configurationClass="org.hibernate.cfg.AnnotationConfiguration"> -->
<!-- 	    <property name="configLocation"> -->
<!-- 			<value>classpath:hibernate.cfg.xml</value> -->
<!-- 		</property> -->
<!--         <property name="configurationClass"> -->
<!-- 			<value>org.hibernate.cfg.AnnotationConfiguration</value> -->
<!-- 		</property> -->
<!-- 		<property name="hibernateProperties"> -->
<!-- 			<props> -->
<!-- 				<prop key="hibernate.dialect">${hibernate.dialect}</prop> -->
<!-- 				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop> -->
<!-- 				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop> -->
<!-- 				<prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop> -->
<!-- 			</props> -->
<!-- 		</property>		 -->
<!-- 	</bean> -->
	
	
	
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
<!-- 		<property name="packagesToScan"> -->
<!-- 			<list> -->
<!-- 				<value>com.rentalhouse.domain</value> -->
<!-- 			</list> -->
<!-- 		</property> -->
		<property name="annotatedClasses">
			<list>				
				<value>com.rentalhouse.domain.Provincia</value>
				<value>com.rentalhouse.domain.Localidad</value>
				<value>com.rentalhouse.domain.Domicilio</value>
				<value>com.rentalhouse.domain.Persona</value>
				<value>com.rentalhouse.domain.Usuario</value>
				<value>com.rentalhouse.domain.Propietario</value>
				<value>com.rentalhouse.domain.Inquilino</value>
				<value>com.rentalhouse.domain.Garante</value>
				<value>com.rentalhouse.domain.Propiedad</value>
				<value>com.rentalhouse.domain.Cuota</value>
				<value>com.rentalhouse.domain.Contrato</value>				
			</list>
		</property>		
		<property name="hibernateProperties">
			<props>
				<prop key="dialect">${hibernate.dialect}</prop>
				<prop key="show_sql">${hibernate.show_sql}</prop>
				<prop key="format_sql">${hibernate.format_sql}</prop>
				<prop key="generate_statistics">${hibernate.generate_statistics}</prop>
				<prop key="hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>				
			</props>
		</property>		
	</bean>
	
	<!-- Managing exception using PersistenceExceptionTranslationPostProcessor to throws DataAccessException -->
	<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

	<!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager"
			p:sessionFactory-ref="sessionFactory"/>
			
	<!-- Instruct Spring to perform declarative transaction management automatically on annotated classes. -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!-- ========================= BUSINESS OBJECT DEFINITIONS ========================= -->

	<!--
		Activates various annotations to be detected in bean classes:
		Spring's @Required and @Autowired, as well as JSR 250's @Resource.
	-->
<!-- 	<context:annotation-config/> -->
	
	<context:component-scan base-package="com.rentalhouse.service">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
	</context:component-scan>
	
	<context:component-scan base-package="com.rentalhouse.dao">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
	</context:component-scan>

	<!--
		Exporter that exposes the Hibernate statistics service via JMX. Autodetects the
		service MBean, using its bean name as JMX object name.
	-->
	<context:mbean-export/>
	
</beans>