<?xml version="1.0" encoding="UTF-8"?>
<!-- - DispatcherServlet application context for RentalHouse's web tier. -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:oxm="http://www.springframework.org/schema/oxm" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
				http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-3.0.xsd
				http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

	<!-- Registering Tiles and Templates -->
	<bean class="org.springframework.web.servlet.view.UrlBasedViewResolver"
		p:viewClass="org.springframework.web.servlet.view.tiles2.TilesView"
		p:order="0" />
	<bean class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/tiles.xml</value>
			</list>
		</property>
	</bean>

	<!-- - This bean configures the 'prefix' and 'suffix' properties of - InternalResourceViewResolver, 
		which resolves logical view names - returned by Controllers. For example, 
		a logical view name of "propietario" - will be mapped to "/WEB-INF/jsp/propietario.jsp". -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:viewClass="org.springframework.web.servlet.view.JstlView" p:prefix="/WEB-INF/jsp/"
		p:suffix=".jsp" p:order="1" />

	<!-- - The controllers are autodetected POJOs labeled with the @Controller 
		annotation. -->
	<context:component-scan base-package="com.rentalhouse.controller">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Service" />
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Repository" />
	</context:component-scan>

	<!-- - The form-based controllers within this application provide @RequestMapping 
		- annotations at the type level for path mapping URLs and @RequestMapping 
		- at the method level for request type mappings (e.g., GET and POST). - In 
		contrast, ClinicController - which is not form-based - provides - @RequestMapping 
		only at the method level for path mapping URLs. - - DefaultAnnotationHandlerMapping 
		is driven by these annotations and is - enabled by default with Java 5+. -->
	<mvc:annotation-driven />

	<!-- - This bean resolves specific types of exceptions to corresponding 
		logical - view names for error views. The default behaviour of DispatcherServlet 
		- is to propagate all exceptions to the servlet container: this will happen 
		- here with all other types of exceptions. -->
	<bean
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="org.springframework.web.servlet.PageNotFound">pageNotFound</prop>
				<prop key="org.springframework.dao.DataAccessException">dataAccessFailure</prop>
				<prop key="org.springframework.transaction.TransactionException">dataAccessFailure</prop>
			</props>
		</property>
	</bean>

	<!-- - Message source for this context, loaded from localized "messages_xx" 
		files. - Could also reside in the root application context, as it is generic, 
		- but is currently just used within PetClinic's web tier. -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource"
		p:basename="messages" />

	<!-- Multipart Resolver bean handle each request and inspect if the multipart 
		is found, after that each request is treated as a normal attribute in the 
		request. It use commons-fileupload.jar. -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- max file size to upload in bytes -->
		<property name="maxUploadSize" value="100000" />
	</bean>

	<!-- sets up a handler for static resources REVIEW THIS BEAN!!!! -->
	<mvc:resources location="/resources/" mapping="/resources/**"/>
	
	<!-- JSON Configuration -->
	<bean id="jacksonMessageConverter" 
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"></bean>
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="jacksonMessageConverter"/>
			</list>
		</property>
	</bean>

</beans>
